import torch
import sklearn
import numpy as np
from torch.utils.data import DataLoader, Dataset
from xgutils import *
import scipy
import h5py
import time
import glob
import os

import numpy as np

class RedwoodDataset(Dataset):
    def __init__(self, data_dir='/studio/datasets/famous/', split='test', boundary_N=8192, target_N=-1, \
            partial_opt = {"class" :"shapeformer.data.ar_datasets.partial.BallSelector", 
                "kwargs":dict(radius=.4, context_N=512)}, **kwargs):
        self.__dict__.update(locals())
        self.objs = glob.glob( os.path.join('/studio/liqiang/KineticPts',"*.ply") )
        self.pts_files = glob.glob( os.path.join(data_dir,"*.pts") )
        self.length = len(self.objs)
        self.partial_selector = sysutil.instantiate_from_opt(self.partial_opt)
    def __len__(self):
        return self.length 
    def __getitem__(self, index):
        #objname = self.objs[index].split("/")[-1]
        vert, face = igl.read_triangle_mesh(self.objs[index])
        vert, face = vert.astype(np.float32), face.astype(int)
        Xbd = geoutil.sampleMesh(vert, face, sampleN=self.boundary_N)

        #rot = R.from_euler('zyx', [45, 0, 0], degrees=True)
        #Xbd = rot.apply(Xbd)
        Xct = self.get_partial(Xbd)

        Xbd = Xbd.astype(np.float32)
        Xct = Xct.astype(np.float32)
        #return {"Xbd":Xbd, "Xct":Xct, "vert":vert, "face":face, "name":objname}
        #import pdb; pdb.set_trace()
        points = np.loadtxt(self.pts_files[index])[:,:3].astype(np.float32)
        #return {"Xbd":points, "Xct":points, "vert": points, "face": points, "name":'0'}
        return {"Xbd":points, "Xct":points}#, "vert":vert, "face":face}#, "name":objname}

    def get_partial(self, Xbd, Xtg=None, Ytg=None):
        Xct = self.partial_selector(Xbd)
        return Xct

    def get_partial(self, Xbd, Xtg=None, Ytg=None):
        Xct = self.partial_selector(Xbd)
        return Xct
